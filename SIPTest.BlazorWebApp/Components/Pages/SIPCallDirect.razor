@page "/sip-call-direct"
@using KristofferStrube.Blazor.DOM
@using KristofferStrube.Blazor.FileAPI
@using KristofferStrube.Blazor.MediaCaptureStreams
@using KristofferStrube.Blazor.MediaStreamRecording
@using KristofferStrube.Blazor.WebAudio
@using KristofferStrube.Blazor.WebIDL
@using KristofferStrube.Blazor.WebIDL.Exceptions
@using SIPSorcery.Media
@using SIPSorcery.SIP
@using SIPSorcery.SIP.App
@using SIPSorceryMedia.Abstractions
@using SIPSorceryMedia.Windows
@using Serilog
@using Serilog.Extensions.Logging
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject IMediaDevicesService MediaDevicesService
@inject ISIPCallService _sipCallService
<PageTitle>WebAudio - Record MediaStream</PageTitle>
<h2>Record MediaStream</h2>

@*TODO - Add Amplifier to visual incoming audio from WebAudio*@

@if (error is { } errorMessage)
{
    <p style="color: red;">@errorMessage</p>
}
else
{
    if (!recording)
    {
        <button class="btn btn-primary" @onclick="Record">Record</button>
        <br />
        @if (audioOptions.Count > 0)
        {
            <label for="audioSource">Audio Source</label>
            <select id="audioSource" @bind=selectedAudioSource>
                @foreach (var option in audioOptions)
                {
                    <option value="@option.id" selected="@(option.id == selectedAudioSource)">@option.label</option>
                }
            </select>
        }
    }
    else
    {
        <button class="btn btn-danger" @onclick="StopRecording">Stop Record</button>
    }
}

@code {
    private AudioContext? context;
    private AnalyserNode? analyser;
    private MediaDevices? mediaDevices;
    private string? error;
    private byte[] frequencyMeasurements = Array.Empty<byte>();
    private MediaStream? mediaStream;
    private List<(string label, string id)> audioOptions = new();
    private string? selectedAudioSource;
    private double peakFrequencySum = 0;
    private double peakFrequencyCount = 0;
    bool recording = false;

    double offset = 0;
    double duration = 0;

    float playbackRate = 1;

    MediaRecorder? recorder;
    EventListener<BlobEvent>? dataAvailableEventListener;
    List<Blob> blobsRecorded = new();
    AudioBuffer? audioBuffer;

    private static string DESTINATION = "aaron@127.0.0.1:5060";
    private static SIPEndPoint OUTBOUND_PROXY = null;

    private const string WELCOME_8K = "hellowelcome8k.raw";
    private const string GOODBYE_16K = "goodbye16k.raw";

    async Task Record()
    {
        _sipCallService.StartCall(new AudioEncoder());
        recording = true;
        StateHasChanged();
    }

    async Task StopRecording()
    {
        await _sipCallService.EndCall();
        recording = false;
        StateHasChanged();
    }

    async Task StopAudioTrack()
    {
        if (mediaStream is null) return;
        var audioTrack = (await mediaStream.GetAudioTracksAsync()).FirstOrDefault();
        if (audioTrack is not null)
        {
            await audioTrack.StopAsync();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await StopAudioTrack();
    }
}

